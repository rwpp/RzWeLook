// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/rwpp/RzWeLook/internal/events/article"
	"github.com/rwpp/RzWeLook/internal/ioc"
	"github.com/rwpp/RzWeLook/internal/repository"
	"github.com/rwpp/RzWeLook/internal/repository/cache"
	"github.com/rwpp/RzWeLook/internal/repository/dao"
	"github.com/rwpp/RzWeLook/internal/service"
	"github.com/rwpp/RzWeLook/internal/web"
	"github.com/rwpp/RzWeLook/internal/web/jwt"
)

// Injectors from wire.go:

func InitApp() *App {
	cmdable := ioc.InitRedis()
	handler := jwt.NewRedisJWTHandler(cmdable)
	v := ioc.InitMiddleware(cmdable, handler)
	db := ioc.InitDB()
	userDAO := dao.NewUserDAO(db)
	userCacheInterface := cache.NewUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCacheInterface)
	userService := service.NewUserService(userRepository)
	codeCacheInterface := cache.NewCodeCache(cmdable)
	codeRepositoryInterface := repository.NewCodeRepository(codeCacheInterface)
	smsService := ioc.InitSMSService()
	codeServiceInterface := service.NewCodeService(codeRepositoryInterface, smsService)
	loggerV1 := ioc.InitLogger()
	userHandler := web.NewUserHandler(userService, codeServiceInterface, handler, loggerV1)
	wechatService := ioc.InitOAuthWechatService()
	wechatHandlerConfig := ioc.NewWechatHandler()
	oAuthWechatHandler := web.NewOAuthWechatHandler(wechatService, userService, handler, wechatHandlerConfig)
	articleDAO := dao.NewGORMArticleDAO(db)
	articleCache := cache.NewRedisArticleCache(cmdable)
	articleRepository := repository.NewArticleRepository(articleDAO, articleCache, loggerV1, userRepository)
	client := ioc.InitKafka()
	syncProducer := ioc.NewSyncProducer(client)
	producer := article.NewKafkaProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, loggerV1, producer)
	interactiveDAO := dao.NewGORMInteractiveDAO(db)
	interactiveCache := cache.NewRedisInteractiveCache(cmdable)
	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, interactiveCache, loggerV1)
	interactiveService := service.NewInteractiveService(interactiveRepository, loggerV1)
	articleHandler := web.NewArticleHandler(articleService, interactiveService, loggerV1)
	engine := ioc.InitWeb(v, userHandler, oAuthWechatHandler, articleHandler)
	interactiveReadEventConsumer := article.NewInteractiveReadEventConsumer(client, interactiveRepository, loggerV1)
	v2 := ioc.NewConsumers(interactiveReadEventConsumer)
	rankingCache := cache.NewRankingCache(cmdable)
	rankingRepository := repository.NewRankingRepository(rankingCache)
	rankingService := service.NewRankingService(articleService, interactiveService, rankingRepository)
	rankingJob := ioc.InitRankingJob(rankingService)
	cron := ioc.InitJobs(loggerV1, rankingJob)
	app := &App{
		web:       engine,
		consumers: v2,
		cron:      cron,
	}
	return app
}

// wire.go:

var rankingServiceSet = wire.NewSet(repository.NewRankingRepository, cache.NewRankingCache, service.NewRankingService)
