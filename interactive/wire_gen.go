// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/rwpp/RzWeLook/interactive/events"
	"github.com/rwpp/RzWeLook/interactive/grpc"
	"github.com/rwpp/RzWeLook/interactive/ioc"
	"github.com/rwpp/RzWeLook/interactive/repository"
	"github.com/rwpp/RzWeLook/interactive/repository/cache"
	"github.com/rwpp/RzWeLook/interactive/repository/dao"
	"github.com/rwpp/RzWeLook/interactive/service"
)

// Injectors from wire.go:

func Init() *App {
	loggerV1 := ioc.InitLogger()
	client := ioc.InitEtcdClient()
	srcDB := ioc.InitSrc(loggerV1)
	dstDB := ioc.InitDst(loggerV1)
	doubleWritePool := ioc.InitDoubleWritePool(srcDB, dstDB)
	db := ioc.InitBizDB(doubleWritePool)
	interactiveDAO := dao.NewGORMInteractiveDAO(db)
	cmdable := ioc.InitRedis()
	interactiveCache := cache.NewRedisInteractiveCache(cmdable)
	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, interactiveCache, loggerV1)
	interactiveService := service.NewInteractiveService(interactiveRepository, loggerV1)
	interactiveServiceServer := grpc.NewInteractiveServiceServer(interactiveService)
	server := ioc.InitGRPCxServer(loggerV1, client, interactiveServiceServer)
	saramaClient := ioc.InitKafka()
	interactiveReadEventConsumer := events.NewInteractiveReadEventConsumer(saramaClient, interactiveRepository, loggerV1)
	consumer := ioc.InitFixDataConsumer(loggerV1, srcDB, dstDB, saramaClient)
	v := ioc.NewConsumers(interactiveReadEventConsumer, consumer)
	syncProducer := ioc.InitSyncProducer(saramaClient)
	producer := ioc.InitMigradatorProducer(syncProducer)
	ginxServer := ioc.InitMigratorServer(loggerV1, srcDB, dstDB, doubleWritePool, producer)
	app := &App{
		server:    server,
		consumers: v,
		webAdmin:  ginxServer,
	}
	return app
}

// wire.go:

var serviceProviderSet = wire.NewSet(dao.NewGORMInteractiveDAO, cache.NewRedisInteractiveCache, repository.NewCachedInteractiveRepository, service.NewInteractiveService)

var thirdProvider = wire.NewSet(ioc.InitSrc, ioc.InitDst, ioc.InitDoubleWritePool, ioc.InitBizDB, ioc.InitRedis, ioc.InitLogger, ioc.InitKafka, ioc.InitEtcdClient, ioc.InitSyncProducer)

var migratorSet = wire.NewSet(ioc.InitMigratorServer, ioc.InitFixDataConsumer, ioc.InitMigradatorProducer)
